# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pyjel
else:
    import _pyjel

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


YCOMP = _pyjel.YCOMP
UCOMP = _pyjel.UCOMP
VCOMP = _pyjel.VCOMP
USE_PRN_CACHE = _pyjel.USE_PRN_CACHE
JELBS_HDR_SIZE = _pyjel.JELBS_HDR_SIZE
JEL_DEFAULT_PRN_CACHE_SIZE = _pyjel.JEL_DEFAULT_PRN_CACHE_SIZE
JEL_NLEVELS = _pyjel.JEL_NLEVELS
class jel_freq_spec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    init = property(_pyjel.jel_freq_spec_init_get, _pyjel.jel_freq_spec_init_set)
    nfreqs = property(_pyjel.jel_freq_spec_nfreqs_get, _pyjel.jel_freq_spec_nfreqs_set)
    maxfreqs = property(_pyjel.jel_freq_spec_maxfreqs_get, _pyjel.jel_freq_spec_maxfreqs_set)
    nlevels = property(_pyjel.jel_freq_spec_nlevels_get, _pyjel.jel_freq_spec_nlevels_set)
    freqs = property(_pyjel.jel_freq_spec_freqs_get, _pyjel.jel_freq_spec_freqs_set)
    in_use = property(_pyjel.jel_freq_spec_in_use_get, _pyjel.jel_freq_spec_in_use_set)

    def __init__(self):
        _pyjel.jel_freq_spec_swiginit(self, _pyjel.new_jel_freq_spec())
    __swig_destroy__ = _pyjel.delete_jel_freq_spec

# Register jel_freq_spec in _pyjel:
_pyjel.jel_freq_spec_swigregister(jel_freq_spec)
cvar = _pyjel.cvar

JEL_ECC_NONE = _pyjel.JEL_ECC_NONE
JEL_ECC_RSCODE = _pyjel.JEL_ECC_RSCODE
_JEL_ECC_FIRST_METHOD = _pyjel._JEL_ECC_FIRST_METHOD
_JEL_ECC_LAST_METHOD = _pyjel._JEL_ECC_LAST_METHOD
class prn_cache(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ncalls = property(_pyjel.prn_cache_ncalls_get, _pyjel.prn_cache_ncalls_set)
    k = property(_pyjel.prn_cache_k_get, _pyjel.prn_cache_k_set)
    nlist = property(_pyjel.prn_cache_nlist_get, _pyjel.prn_cache_nlist_set)
    list = property(_pyjel.prn_cache_list_get, _pyjel.prn_cache_list_set)

    def __init__(self):
        _pyjel.prn_cache_swiginit(self, _pyjel.new_prn_cache())
    __swig_destroy__ = _pyjel.delete_prn_cache

# Register prn_cache in _pyjel:
_pyjel.prn_cache_swigregister(prn_cache)


def jelprn_create(size, seed):
    return _pyjel.jelprn_create(size, seed)

def jelprn_destroy(p):
    return _pyjel.jelprn_destroy(p)

def jelprn_reset(cache):
    return _pyjel.jelprn_reset(cache)

def jelprn_next(cache):
    return _pyjel.jelprn_next(cache)

def jelprn_reload(cache, seed):
    return _pyjel.jelprn_reload(cache, seed)
class jel_config(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    srcinfo = property(_pyjel.jel_config_srcinfo_get, _pyjel.jel_config_srcinfo_set)
    srcfp = property(_pyjel.jel_config_srcfp_get, _pyjel.jel_config_srcfp_set)
    dstinfo = property(_pyjel.jel_config_dstinfo_get, _pyjel.jel_config_dstinfo_set)
    dstfp = property(_pyjel.jel_config_dstfp_get, _pyjel.jel_config_dstfp_set)
    coefs = property(_pyjel.jel_config_coefs_get, _pyjel.jel_config_coefs_set)
    dstcoefs = property(_pyjel.jel_config_dstcoefs_get, _pyjel.jel_config_dstcoefs_set)
    jerr = property(_pyjel.jel_config_jerr_get, _pyjel.jel_config_jerr_set)
    logger = property(_pyjel.jel_config_logger_get, _pyjel.jel_config_logger_set)
    verbose = property(_pyjel.jel_config_verbose_get, _pyjel.jel_config_verbose_set)
    quality = property(_pyjel.jel_config_quality_get, _pyjel.jel_config_quality_set)
    extract_only = property(_pyjel.jel_config_extract_only_get, _pyjel.jel_config_extract_only_set)
    freqs = property(_pyjel.jel_config_freqs_get, _pyjel.jel_config_freqs_set)
    embed_length = property(_pyjel.jel_config_embed_length_get, _pyjel.jel_config_embed_length_set)
    jpeglen = property(_pyjel.jel_config_jpeglen_get, _pyjel.jel_config_jpeglen_set)
    len = property(_pyjel.jel_config_len_get, _pyjel.jel_config_len_set)
    maxlen = property(_pyjel.jel_config_maxlen_get, _pyjel.jel_config_maxlen_set)
    data = property(_pyjel.jel_config_data_get, _pyjel.jel_config_data_set)
    data_ptr = property(_pyjel.jel_config_data_ptr_get, _pyjel.jel_config_data_ptr_set)
    data_lengths = property(_pyjel.jel_config_data_lengths_get, _pyjel.jel_config_data_lengths_set)
    capacity = property(_pyjel.jel_config_capacity_get, _pyjel.jel_config_capacity_set)
    jel_errno = property(_pyjel.jel_config_jel_errno_get, _pyjel.jel_config_jel_errno_set)
    ecc_method = property(_pyjel.jel_config_ecc_method_get, _pyjel.jel_config_ecc_method_set)
    ecc_blocklen = property(_pyjel.jel_config_ecc_blocklen_get, _pyjel.jel_config_ecc_blocklen_set)
    bits_per_freq = property(_pyjel.jel_config_bits_per_freq_get, _pyjel.jel_config_bits_per_freq_set)
    maxmcus = property(_pyjel.jel_config_maxmcus_get, _pyjel.jel_config_maxmcus_set)
    ethresh = property(_pyjel.jel_config_ethresh_get, _pyjel.jel_config_ethresh_set)
    seed = property(_pyjel.jel_config_seed_get, _pyjel.jel_config_seed_set)
    seed16v = property(_pyjel.jel_config_seed16v_get, _pyjel.jel_config_seed16v_set)
    mcu_density = property(_pyjel.jel_config_mcu_density_get, _pyjel.jel_config_mcu_density_set)
    nmcus = property(_pyjel.jel_config_nmcus_get, _pyjel.jel_config_nmcus_set)
    prn_cache = property(_pyjel.jel_config_prn_cache_get, _pyjel.jel_config_prn_cache_set)
    mcu_list = property(_pyjel.jel_config_mcu_list_get, _pyjel.jel_config_mcu_list_set)
    dc_values = property(_pyjel.jel_config_dc_values_get, _pyjel.jel_config_dc_values_set)
    mcu_flag = property(_pyjel.jel_config_mcu_flag_get, _pyjel.jel_config_mcu_flag_set)
    mcu_index = property(_pyjel.jel_config_mcu_index_get, _pyjel.jel_config_mcu_index_set)
    randomize_mcus = property(_pyjel.jel_config_randomize_mcus_get, _pyjel.jel_config_randomize_mcus_set)
    embed_bitstream_header = property(_pyjel.jel_config_embed_bitstream_header_get, _pyjel.jel_config_embed_bitstream_header_set)
    set_dc = property(_pyjel.jel_config_set_dc_get, _pyjel.jel_config_set_dc_set)
    clear_ac = property(_pyjel.jel_config_clear_ac_get, _pyjel.jel_config_clear_ac_set)
    dc_quant = property(_pyjel.jel_config_dc_quant_get, _pyjel.jel_config_dc_quant_set)
    debug_mcu = property(_pyjel.jel_config_debug_mcu_get, _pyjel.jel_config_debug_mcu_set)
    qtable = property(_pyjel.jel_config_qtable_get, _pyjel.jel_config_qtable_set)
    normalize = property(_pyjel.jel_config_normalize_get, _pyjel.jel_config_normalize_set)
    set_lsbs = property(_pyjel.jel_config_set_lsbs_get, _pyjel.jel_config_set_lsbs_set)
    components = property(_pyjel.jel_config_components_get, _pyjel.jel_config_components_set)
    prefilter_func = property(_pyjel.jel_config_prefilter_func_get, _pyjel.jel_config_prefilter_func_set)
    nPrefilter = property(_pyjel.jel_config_nPrefilter_get, _pyjel.jel_config_nPrefilter_set)
    needFinishDecompress = property(_pyjel.jel_config_needFinishDecompress_get, _pyjel.jel_config_needFinishDecompress_set)
    needFinishCompress = property(_pyjel.jel_config_needFinishCompress_get, _pyjel.jel_config_needFinishCompress_set)

    def __init__(self):
        _pyjel.jel_config_swiginit(self, _pyjel.new_jel_config())
    __swig_destroy__ = _pyjel.delete_jel_config

# Register jel_config in _pyjel:
_pyjel.jel_config_swigregister(jel_config)

JEL_PROP_QUALITY = _pyjel.JEL_PROP_QUALITY
JEL_PROP_EMBED_LENGTH = _pyjel.JEL_PROP_EMBED_LENGTH
JEL_PROP_ECC_METHOD = _pyjel.JEL_PROP_ECC_METHOD
JEL_PROP_ECC_BLOCKLEN = _pyjel.JEL_PROP_ECC_BLOCKLEN
JEL_PROP_PRN_SEED = _pyjel.JEL_PROP_PRN_SEED
JEL_PROP_NLEVELS = _pyjel.JEL_PROP_NLEVELS
JEL_PROP_NFREQS = _pyjel.JEL_PROP_NFREQS
JEL_PROP_MAXFREQS = _pyjel.JEL_PROP_MAXFREQS
JEL_PROP_BITS_PER_MCU = _pyjel.JEL_PROP_BITS_PER_MCU
JEL_PROP_BITS_PER_FREQ = _pyjel.JEL_PROP_BITS_PER_FREQ
JEL_PROP_MCU_DENSITY = _pyjel.JEL_PROP_MCU_DENSITY
JEL_PROP_EMBED_HEADER = _pyjel.JEL_PROP_EMBED_HEADER
JEL_PROP_NORMALIZE = _pyjel.JEL_PROP_NORMALIZE
JEL_PROP_SET_DC = _pyjel.JEL_PROP_SET_DC
JEL_PROP_CLEAR_AC = _pyjel.JEL_PROP_CLEAR_AC
_JEL_PROP_FIRST = _pyjel._JEL_PROP_FIRST
_JEL_PROP_LAST = _pyjel._JEL_PROP_LAST
JEL_SUCCESS = _pyjel.JEL_SUCCESS
JEL_ERR_JPEG = _pyjel.JEL_ERR_JPEG
JEL_ERR_NOSUCHPROP = _pyjel.JEL_ERR_NOSUCHPROP
JEL_ERR_BADDIMS = _pyjel.JEL_ERR_BADDIMS
JEL_ERR_NOMSG = _pyjel.JEL_ERR_NOMSG
JEL_ERR_CANTOPENLOG = _pyjel.JEL_ERR_CANTOPENLOG
JEL_ERR_CANTCLOSELOG = _pyjel.JEL_ERR_CANTCLOSELOG
JEL_ERR_CANTOPENFILE = _pyjel.JEL_ERR_CANTOPENFILE
JEL_ERR_INVALIDFPTR = _pyjel.JEL_ERR_INVALIDFPTR
JEL_ERR_NODEST = _pyjel.JEL_ERR_NODEST
JEL_ERR_MSG_OVERFLOW = _pyjel.JEL_ERR_MSG_OVERFLOW
JEL_ERR_CREATE_MCU = _pyjel.JEL_ERR_CREATE_MCU
JEL_ERR_ECC = _pyjel.JEL_ERR_ECC
JEL_ERR_CHECKSUM = _pyjel.JEL_ERR_CHECKSUM


